generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String?   
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  createdRooms  Room[]    @relation("RoomCreator")
  gameResults   GameResult[]
  playerStats   PlayerStats[]
  roomMembers   RoomMember[]
  typingSpeeds  TypingSpeed[] // Added relation for TypingSpeed
}

model Account {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?     
  token_type         String?  
  scope              String?  
  id_token           String?  
  session_state      String?  

  createdAt          DateTime @default(now()) // ✅ Add this line or modify if already present
  updatedAt          DateTime @updatedAt      // ✅ Optional but recommended

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}




model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Room management
model Room {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  creatorId   String
  joinCode    String     @unique
  maxPlayers  Int        @default(4)
  isPrivate   Boolean    @default(false)
  status      RoomStatus @default(WAITING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  expiresAt   DateTime   // Room expiration time
  
  // Game settings
  gameMode     GameMode    @default(SPEED_TEST)
  textLength   TextLength  @default(MEDIUM)
  timeLimit    Int?        // in seconds
  customText   String?     // for custom text mode
  
  // Relations
  creator      User         @relation("RoomCreator", fields: [creatorId], references: [id])
  members      RoomMember[]
  games        Game[]
  
  @@index([status])
  @@index([expiresAt])
}

model RoomMember {
  id       String           @id @default(auto()) @map("_id") @db.ObjectId
  roomId   String
  userId   String
  role     RoomMemberRole   @default(PLAYER)
  status   RoomMemberStatus @default(JOINED)
  joinedAt DateTime         @default(now())
  mode     Active         @default(INACTIVE) 
  codeVailed  Boolean          @default(true) 
  // Relations
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])
  
  @@unique([roomId, userId])
  @@index([roomId])
  @@index([userId])
}

// Game session management
model Game {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  roomId      String
  gameNumber  Int        // Game sequence in room (1st, 2nd, etc.)
  text        String     // The text to be typed
  textSource  String?    // Source of the text (book, article, etc.)
  status      GameStatus @default(WAITING)
  startedAt   DateTime?
  endedAt     DateTime?
  duration    Int?       // in seconds
  createdAt   DateTime   @default(now())
  
  // Relations
  room    Room         @relation(fields: [roomId], references: [id], onDelete: Cascade)
  results GameResult[]
  
  @@unique([roomId, gameNumber])
  @@index([roomId])
  @@index([status])
}

// Individual game results
model GameResult {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  gameId          String
  userId          String
  wpm             Float    // Words per minute
  accuracy        Float    // Accuracy percentage
  charactersTyped Int
  errorsCount     Int
  timeSpent       Int      // in seconds
  position        Int      // Final position in the game
  completedAt     DateTime @default(now())
  
  // Detailed typing data
  keystrokeData   Json?    // Detailed keystroke timing data
  progressData    Json?    // Progress over time data
  
  // Relations
  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])
  
  @@unique([gameId, userId])
  @@index([gameId])
  @@index([userId])
  @@index([wpm])
}
model TypingSpeed {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  roomId    String
  wpm       Int
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  @@unique([userId, roomId])
}

// Player statistics and achievements
model PlayerStats {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String
  totalGames      Int      @default(0)
  totalWins       Int      @default(0)
  bestWpm         Float    @default(0)
  averageWpm      Float    @default(0)
  bestAccuracy    Float    @default(0)
  averageAccuracy Float    @default(0)
  totalTimeSpent  Int      @default(0) // in seconds
  streak          Int      @default(0) // Current win streak
  bestStreak      Int      @default(0) // Best win streak
  level           Int      @default(1)
  experience      Int      @default(0)
  updatedAt       DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id])
  
  @@unique([userId])
  @@index([bestWpm])
  @@index([level])
}

// Leaderboards
model Leaderboard {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  type        LeaderboardType
  period      TimePeriod
  entries     Json            // Array of leaderboard entries
  generatedAt DateTime        @default(now())
  
  @@unique([type, period])
  @@index([type])
  @@index([generatedAt])
}

// Friend system
model Friendship {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  requesterId String
  receiverId  String
  status      FriendshipStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  @@unique([requesterId, receiverId])
  @@index([requesterId])
  @@index([receiverId])
  @@index([status])
}

// Text content for games
model TextContent {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  source      String?
  difficulty  Difficulty @default(MEDIUM)
  length      TextLength
  language    String     @default("en")
  category    String?
  tags        String[]
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  
  @@index([difficulty])
  @@index([length])
  @@index([language])
  @@index([category])
}

// Enums
enum RoomStatus {
  WAITING
  IN_GAME
  FINISHED
  EXPIRED
}

enum GameMode {
  SPEED_TEST
  ACCURACY_TEST
  SURVIVAL
  CUSTOM_TEXT
}

enum TextLength {
  SHORT      // ~50 words
  MEDIUM     // ~100 words
  LONG       // ~200 words
  MARATHON   // ~500+ words
}

enum RoomMemberRole {
  CREATOR
  PLAYER
  SPECTATOR
}

enum RoomMemberStatus {
  JOINED
  READY
  PLAYING
  FINISHED
  LEFT
}

enum GameStatus {
  WAITING
  STARTING
  IN_PROGRESS
  FINISHED
  CANCELLED
}
enum Active {
  ACTIVE
  INACTIVE
}
enum LeaderboardType {
  SPEED
  ACCURACY
  GAMES_WON
  EXPERIENCE
}

enum TimePeriod {
  DAILY
  WEEKLY
  MONTHLY
  ALL_TIME
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}